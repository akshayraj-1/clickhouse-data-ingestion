worker_processes 1;

env CLICKHOUSE_USER;
env CLICKHOUSE_PASSWORD;

events {
    worker_connections 1024;
}

http {
    lua_package_path "/usr/local/openresty/lualib/?.lua;;";

    upstream clickhouse {
        server clickhouse:8123;
        keepalive 32;
    }

    server {
        listen 8123;
        server_name localhost;

        set_by_lua_block $clickhouse_user {
            return os.getenv("CLICKHOUSE_USER") or "default"
        }

        set_by_lua_block $clickhouse_pass {
            return os.getenv("CLICKHOUSE_PASSWORD") or ""
        }

        location / {
            access_by_lua_block {
                local jwt = require("resty.jwt")
                local validators = require("resty.jwt-validators")
                local auth_header = ngx.var.http_Authorization

                if not auth_header then
                    ngx.status = 401
                    ngx.header["WWW-Authenticate"] = 'Bearer realm="ClickHouse"'
                    ngx.say('{"error": "Missing Authorization header"}')
                    return ngx.exit(401)
                end

                local _, _, token = string.find(auth_header, "Bearer%s+(.+)")
                if not token then
                    ngx.status = 401
                    ngx.say('{"error": "Invalid token format"}')
                    return ngx.exit(401)
                end

                -- Read public key file
                local pub_key_file = io.open("/etc/public_key.pem", "rb")
                if not pub_key_file then
                    ngx.status = 500
                    ngx.say('{"error": "Missing public key"}')
                    return ngx.exit(500)
                end
                local pub_key = pub_key_file:read("*a")
                pub_key_file:close()

                -- Set up claim validators
                local claim_spec = {
                    exp = validators.is_not_expired(),
                    -- Add other claims you want to validate
                    -- sub = validators.equals("required_subject"),
                    -- role = validators.equals("admin")
                }

                -- Verify token
                local jwt_obj = jwt:verify(pub_key, token, claim_spec)

                if not jwt_obj.verified then
                    ngx.status = 401
                    ngx.say('{"error": "Invalid token: ' .. jwt_obj.reason .. '"}')
                    return ngx.exit(401)
                end

                -- Additional custom validation if needed
                if not jwt_obj.payload.exp then
                    ngx.status = 401
                    ngx.say('{"error": "Token must have expiration"}')
                    return ngx.exit(401)
                end

                -- Remove Authorization header before proxying
                ngx.req.clear_header("Authorization")

                -- Log ClickHouse credentials
                ngx.log(ngx.INFO, "ClickHouse User: ", ngx.var.clickhouse_user)
                ngx.log(ngx.INFO, "ClickHouse Password: ", ngx.var.clickhouse_pass)

                -- Log all request headers
                local headers = ngx.req.get_headers()
                for k, v in pairs(headers) do
                    if type(v) == "table" then
                        ngx.log(ngx.INFO, "Header: ", k, " = ", table.concat(v, ", "))
                    else
                        ngx.log(ngx.INFO, "Header: ", k, " = ", v)
                    end
                end
            }

            proxy_set_header X-ClickHouse-User $clickhouse_user;
            proxy_set_header X-ClickHouse-Key $clickhouse_pass;
            proxy_pass http://clickhouse;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }
    }
}
